Fix Rust build for OpenBSD
See https://github.com/SamuelYvon/netifaces-2/pull/43

Index: src/linux.rs
--- src/linux.rs.orig
+++ src/linux.rs
@@ -1,8 +1,10 @@
 use crate::common::InterfaceDisplay;
 use crate::types::{
-    AddrPairs, IfAddrs, IfacesByIndex, ADDR_ADDR, AF_ALG, AF_INET, AF_INET6, AF_NETLINK, AF_PACKET,
-    AF_VSOCK, BROADCAST_ADDR, MASK_ADDR, PEER_ADDR,
+    AddrPairs, IfAddrs, IfacesByIndex, ADDR_ADDR, AF_INET, AF_INET6, AF_PACKET, BROADCAST_ADDR,
+    MASK_ADDR, PEER_ADDR,
 };
+#[cfg(not(target_os = "openbsd"))]
+use crate::types::{AF_ALG, AF_NETLINK, AF_VSOCK};
 use nix::ifaddrs;
 use nix::net::if_::if_nameindex;
 use std::collections::{HashMap, HashSet};
@@ -78,12 +80,12 @@ pub fn posix_ifaddresses(if_name: &str) -> Result<IfAd
                     add_to_types_mat(AF_PACKET, mac_addr, name, &mut types_mat, &mut any);
                 }
 
-                #[cfg(not(any(target_os = "ios", target_os = "macos")))]
+                #[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "openbsd")))]
                 if let Some(net_link) = address.as_netlink_addr() {
                     add_to_types_mat(AF_NETLINK, net_link, name, &mut types_mat, &mut any);
                 }
 
-                #[cfg(not(any(target_os = "ios", target_os = "macos")))]
+                #[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "openbsd")))]
                 if let Some(vsock_addr) = address.as_vsock_addr() {
                     add_to_types_mat(AF_VSOCK, vsock_addr, name, &mut types_mat, &mut any);
                 }
@@ -92,7 +94,7 @@ pub fn posix_ifaddresses(if_name: &str) -> Result<IfAd
                     add_to_types_mat(AF_INET, &inet_addr.ip(), name, &mut types_mat, &mut any);
                 }
 
-                #[cfg(not(any(target_os = "ios", target_os = "macos")))]
+                #[cfg(not(any(target_os = "ios", target_os = "macos", target_os = "openbsd")))]
                 if let Some(alg_addr) = address.as_alg_addr() {
                     add_to_types_mat(AF_ALG, alg_addr, name, &mut types_mat, &mut any);
                 }
